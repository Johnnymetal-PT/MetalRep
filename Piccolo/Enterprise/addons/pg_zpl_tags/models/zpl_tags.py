import os
import re
import base64
import unicodedata
import cups
import tempfile
import socket
import requests
from io import BytesIO
from PIL import Image
from odoo import tools
from odoo import models, fields
from odoo.exceptions import UserError

class StockPicking(models.Model):
    _inherit = "stock.picking"

    enable_zpl_printing = fields.Boolean(
        string="Print ZPL Label",
        default=True,
    )

    def _wrap_text(self, text, width=75):
        flat_text = ' '.join(text.split())  # Flatten and normalize whitespace
        words = flat_text.split(' ')
        lines = []
        current_line = ''

        for word in words:
            if len(current_line) + len(word) + 1 <= width:
                current_line += (' ' if current_line else '') + word
            else:
                lines.append(current_line.ljust(width))
                current_line = word

        if current_line:
            lines.append(current_line.ljust(width))

        return '\n'.join(lines)

    def action_print_zpl(self):
        """ Generate and send ZPL labels for all move lines in the picking """

        if not self.move_ids_without_package:
            return

        for move in self.move_ids_without_package:
            for move_line in move.move_line_ids:
                product = move_line.product_id
                volume = int(move.product_uom_qty or 1)
                total_volume = int(move.x_studio_volumes_3 or 1)
                description_lines = self._wrap_text(move.name or '', 80).split('\n')

                # Build ZPL description lines
                desc_zpl_lines = ""
                for idx, line in enumerate(description_lines):
                    x_pos = 200 - (idx * 50)  # Decrease X for vertical downward effect in FWR
                    desc_zpl_lines += f'^FO{x_pos},0^FWR\n^A0,30,30^FD{line}^FS\n'

                zpl_labels = []

                for i in range(1, total_volume + 1):
                    zpl_code = f"""
^XA
^CI28
^PW900
^LH50,30
^FWR
^LS99

^FO750,0
^FO730,0^GFA,7950,7950,15,O07FF8,O07FF81K04001C40F,O07FF81KFENFE4O07FF81FEFFC70NFCO07FF81J0C0FFC7J0FCO07FF81C58FBCFF7IF0F4,O07FF81JF1DFF7EJF6,O07FF81J0810042J07CO07FF81JFADFF43FFC9FCO07FF81J038FF3F00IFCO07FF81NFE0FF0FE4O07FF81L0FF9F00F8E4O07FF81J0IF0904079E4O07FF81JF6870FCFFEFE4O07FF8I0FF69806704CCE4O07FF8M0804J05E4O07FF8M0FECJ0764O07FF8M0FF4J0364O07FF8M0FF4K064O07FF8M0FFL064::O07FF8M0FF4K064:O07FF8M0FF4J0764:::::::::::::::O07FF8M0FF4J0564O07FF8M0FF4J0764::O07FF8M0FF4J0564::O07FF8M0FF4J0764O07FF8M01FCJ0564O07FF8M01F8J0564O07FF8M01F8J0364O07FF8M01FK0AE4O07FF8M01FCJ0AE4O07FF8M01F4J03E4O07FF8M01FCJ03E4O07FF8M01FAJ0CE4O07FF8L01473I01B24O07FF8L014D980070A4O07FF8L016789I06BCO07FF8M0B278003E9CO07FF8M0F2E7F0E396O07FF8M04D02FF0652O07FF8M0CD1F00FC52O07FF8M0B2F9I0358O07FF8M0E2JF7064O07FF8M079JFEFA4O07FF8M02DJFDE38O07FF8N060F007EC8O07FF8M012JFE71,O07FF8N0DKF76,O07FF8N06J07C8,O07FF8,:::::::::::::::::::O07FF83FF00FF00JF4,O07FF80LFD5JF6,O07FF80RF8,O07FF83RFE,O07FF80LF55JF4,O07FF81FF00FFI54404,O07FF81C5JFL06,O07FF8I07FN06,O07FF80F500K54116,O07FF81LFDI5F06,O07FF81NFJ06,O07FF81NF54006,O07FF81RFE,O07FF8,::::::::::::::::::::::O07FF8Q04,O07FF800100JFC014,O07FF803800KFEB6,O07FF8077NFB78,O07FF8006NFBB8,O07FF81FCMF898,O07FF81FCLFE0DDA,O07FF8107003IFE04FA,O07FF83FEFF15JF684,O07FF81FCFF155003A9,O07FF81FC00J5I0B,O07FF81FCFFJ0FFEA,O07FF80FCNF3AE,O07FF80FCO03E,:O07FF80BCN036E,O07FF819CN024E,O07FF811CO07E,O07FF811CO04E,::::::O07FF81CCO04E,::::::O07FF818CO04E,O07FF819CP0E,O07FF811CP0E,:O07FF801CP0E,O07FF808CP0E,:O07FF801CP0E,O07FF813CP0E,O07FF81BCO0BE,O07FF81FCO05E,O07FF81FCN015E,O07FF81FCN015C,O07FF839CO09C,O07FF828CO0BC,O07FF819CO09C,O07FF8184N017C,S0166002I0A67C5,S0399FFAI0367EC,S01FCL066E7A,S0166004I042C3A,S03991F4I058F0A,S0199FF4J0AF,T0660F4J0AF04,S0199FFCI02AE14,S0199078I03A034,T0663F8I023F88,T011FF8I02387,T036FF8I018CC,U01L01A1,,::::::::::::::::::::U0600JF,U0CL0FF7C,T073LFI05,T07CFF00KF88,U01O07C,S01DDOF84,S0178FFL0C7A,S01EI0FF00FF3C2,S01C3LF00A02,S02CCN0EB8,S0208N01C9,S02C0LF00F5D,S02CM0FF31E,S02F8N01BE,S0278N018E,S023CN019E,S023CN013E,:S023CN019E,:::::::::::::::::::S02FCN029E,S02FCN035E,S023CN011E,S023CN01BE,S02FCN01AE,S03FCN03BE,S03FCN039E,S033CN035E,S017FN015A,S0118N015A,T01CN015A,S023CFFCI0FF35E,S0200FF4K0E56,S0300FFEI067044,S033M0200C4,V0FF8J0CE9C,T0FF0F8I03423A,S01I0FJ0355FA,S01C30FJ05AE08,T07D1FJ05A1F,U01FF8I05ACF8,U0EFFJ01AC7,T019FFJ01718,U06FF8I017E,,::::::::::::::::::::U01FFCI07F3,U02006K08C,U0F7F6I07F7F,T0317FEI01E53,T0193FEI01FCA8,S011D1FEI01F6AA,S019C0FEI01F79A,S038E0FEI01FDC,S02C61FEJ0ED5C,S02E63FEI01F35C,S03E7FFEI01FAC2,S03CEFF4I01FAEA,S03CFN0A3A,S03CCN01FA,S03CCN018A,S03C8O0BA,S03D8N018A,S02D8N01FA,S02F8N018A,S03CP0FC,S03DCO0FC,:S03DFO0FC,S031FO0FC,:S030CO0FC,S021CO0FC,S027EO0FC,S021CO0FC,::S023CO0FC,S027EO0FC,S023CO0FC,S031CO0FC,S020CO0FA,S030CO0FA,:S030CO0F8,:S030CO0FA,:S0208O0FA,S023CO0DC,S021P05C,S02F8O0FC,S0278N01FC,S0338N01FC,S0238O03C,S02F4O0BC,S02F8N01BC,S02F8N01EC,S03F8O038,S01F8N01B8,S01E8N01A8,S02ECO0BA,S03C7O038,S0307FF4I07F398,O07FF820IFEI019AB,O07FF83E01EEI038182,O07FF8100FFEI07F81A,O07FF81J0EI038012,O07FF810400EK03CA,O07FF8104FFEK0814,O07FF8I0FFEL04C,O07FF800C00EK02C,O07FF80E4FF6I071C3,O07FF80337E6I0F004,O07FF800E00CI08038,O07FF8001FF8I0FFC,O07FF8,::::::::::::::::::::::O07FF81R08,O07FF83JF4I03IF8,O07FF8010FF4J0C00B,O07FF82FE004I03IF9,O07FF821DFFEI01JF,O07FF83J04J0IF4,O07FF8209FF4I03IF8,O07FF8209FFEJ04IF,O07FF820D004I01IF,O07FF821IFEI01IFA,O07FF823IF4I01IF,O07FF827C7FCI01IFE,O07FF8224FFCJ0FF04,O07FF826,O07FF8314,:::::::O07FF83BC,:O07FF8334,O07FF8314,:O07FF8334,O07FF83BC,:::::::::O07FF83FC,O07FF83BC,::O07FF83FC,O07FF83FE,O07FF83FC,O07FF83BC,O07FF836C,:O07FF826C,O07FF823C,O07FF833C,O07FF837C,O07FF83FC,:O07FF837,O07FF8,::::::::::::::O07FF800C7F8I01FE8,O07FF8033FFAI03F7E,O07FF8066FFAI01F7,O07FF80C0FFAJ0E1C8,O07FF81393FAI01F8F8,O07FF818C3F8I01CF04,O07FF80607F8K07F4,O07FF819F7FAI01F8E8,O07FF801CFF8I01EE18,O07FF820CO0C8,O07FF820CFF6I01F84,O07FF828CFDCI01FBE6,O07FF828EN0306,O07FF805EN01F6,O07FF805EN014E,O07FF811EN015E,O07FF82FCN020E,O07FF82FCP0E,:O07FF82FCN021E,O07FF82FCN039E,O07FF82FCN03DE,O07FF82FCN039E,O07FF82FCN021E,O07FF823CO0FC,:::::::O07FF823CO0EC,::::::O07FF82DCO0EC,O07FF82CP0CC,O07FF83CP0CC,O07FF838P0CC,O07FF83Q0CC,:O07FF838P0CC,O07FF83C8O0CC,:O07FF82ECO0AC,O07FF82ECO0CC,O07FF82ECN01DC,:O07FF826CO09C,:O07FF826EO09C,O07FF826EO05C,O07FF820CN0185,O07FF826600CI0FF395,O07FF820F00CI0FFE03,O07FF8299FF4I0FF8CA,O07FF83CI0EJ07FEA,O07FF816603J0FFE16,O07FF810600CK0C14,O07FF8098024I0IFC4,O07FF81BC00EI0FFBE4,O07FF80C7FFCJ0F838,O07FF801I04I0IFE8,O07FF8036FF4K0E6,O07FF8001FF4I0E5FC,O07FF8O0C02,O07FF8,,::^FS
^FO700,120^FWR
^A0,35,30^FDSoluções para estofos^FS
^FO780,600^FWR
^A0,40,30^FDPEDIDO^FS
^FO600,30^FWR
^A0,70,50^FD{self.origin or ''}^FS
^FO601,31^FWR
^A0,70,50^FD{self.origin or ''}^FS
^FO680,600^FWR
^A0,70,40^FD{self.x_studio_referncia_do_cliente or ''}^FS
^FO681,601^FWR
^A0,70,40^FD{self.x_studio_referncia_do_cliente or ''}^FS
^FO580,600^FWR
^A0,70,40^FD{self.x_studio_referncia_2 or ''}^FS
^FO581,601^FWR
^A0,70,40^FD{self.x_studio_referncia_2 or ''}^FS

^FO550,0^FWR
^A0,30,25^FDCLIENTE:^FS
^FO490,0
^A0,60,60^FD{self.partner_id.name or ''}^FS
^FO491,1
^A0,60,60^FD{self.partner_id.name or ''}^FS

^FO450,0^FWR
^A0,30,25^FDZONA:^FS
^FO390,0^FWR
^A0,60,60^FD{self.partner_id.zip or ' '} {self.x_studio_zona.name or ''}^FS
^FO391,1^FWR
^A0,60,60^FD{self.partner_id.zip or ' '} {self.x_studio_zona.name or ''}^FS

^FO350,0^FWR
^A0,30,25^FDARTIGO:^FS
^FO300,0^FWR
^A0,40,40^FD{move.product_id.name or ''}^FS
^FO301,1^FWR
^A0,40,40^FD{move.product_id.name or ''}^FS

^FO250,0^FWR
^A0,30,25^FDDESCRIÇÃO:^FS
{desc_zpl_lines}

^FO380,850^FWR
^A0,35,35^FDNº VOLUMES^FS
^FO280,850
^A0,100,80^FD{i} / {total_volume}^FS
^FO281,851
^A0,100,80^FD{i} / {total_volume}^FS

^XZ
"""
                    zpl_labels.append(zpl_code)

                # Send the collected labels for this move line
                for zpl_code in zpl_labels:
                    self._send_to_printer(zpl_code)

    def _send_to_printer(self, zpl_code):
        """Write ZPL to a file, read it, encode it, and send to printer"""
        PRINTER_NAME = "ZEBRAG"
        temp_file_path = "/tmp/zpl_print_job.zpl"

        try:
            # Write ZPL code to a file
            with open(temp_file_path, "w", encoding="utf-8") as temp_file:
                temp_file.write(zpl_code)

            # Connect to CUPS
            conn = cups.Connection()
            printers = conn.getPrinters()

            if PRINTER_NAME not in printers:
                raise UserError(f"Printer '{PRINTER_NAME}' not found on the network.")

            # Send the file to the printer
            job_id = conn.printFile(PRINTER_NAME, temp_file_path, "ZPL Print Job", {"raw": "true"})

            print(f"Print job {job_id} sent successfully to {PRINTER_NAME}")

        except cups.IPPError as e:
            raise UserError(f"Printing error: {e}")
        except Exception as e:
            raise UserError(f"Unexpected error: {e}")
        finally:
            # Cleanup the temporary file
            if os.path.exists(temp_file_path):
                os.remove(temp_file_path)

        return {'type': 'ir.actions.client', 'tag': 'reload'}
